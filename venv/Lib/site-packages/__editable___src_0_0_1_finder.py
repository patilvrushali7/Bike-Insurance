from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'Bike-Insurance': 'D:\\Bike insurance\\Bike-Insurance', 'config': 'D:\\Bike insurance\\config', 'src': 'D:\\Bike insurance\\src', 'venv': 'D:\\Bike insurance\\venv'}
NAMESPACES: dict[str, list[str]] = {'Bike-Insurance': ['D:\\Bike insurance\\Bike-Insurance'], 'config': ['D:\\Bike insurance\\config'], 'venv': ['D:\\Bike insurance\\venv'], 'venv.conda-meta': ['D:\\Bike insurance\\venv\\conda-meta'], 'venv.DLLs': ['D:\\Bike insurance\\venv\\DLLs'], 'venv.etc': ['D:\\Bike insurance\\venv\\etc'], 'venv.include': ['D:\\Bike insurance\\venv\\include'], 'venv.Lib': ['D:\\Bike insurance\\venv\\Lib'], 'venv.Library': ['D:\\Bike insurance\\venv\\Library'], 'venv.libs': ['D:\\Bike insurance\\venv\\libs'], 'venv.Scripts': ['D:\\Bike insurance\\venv\\Scripts'], 'venv.share': ['D:\\Bike insurance\\venv\\share'], 'venv.Tools': ['D:\\Bike insurance\\venv\\Tools'], 'venv.include.cpython': ['D:\\Bike insurance\\venv\\include\\cpython'], 'venv.include.internal': ['D:\\Bike insurance\\venv\\include\\internal'], 'venv.Lib.site-packages': ['D:\\Bike insurance\\venv\\Lib\\site-packages'], 'venv.Lib.idlelib.Icons': ['D:\\Bike insurance\\venv\\Lib\\idlelib\\Icons'], 'venv.Lib.site-packages.pkg_resources.tests.data': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\pkg_resources\\tests\\data'], 'venv.Lib.site-packages.pkg_resources.tests.data.my-test-package-source': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\pkg_resources\\tests\\data\\my-test-package-source'], 'venv.Lib.site-packages.pkg_resources.tests.data.my-test-package-zip': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\pkg_resources\\tests\\data\\my-test-package-zip'], 'venv.Lib.site-packages.pkg_resources.tests.data.my-test-package_unpacked-egg': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\pkg_resources\\tests\\data\\my-test-package_unpacked-egg'], 'venv.Lib.site-packages.pkg_resources.tests.data.my-test-package_zipped-egg': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\pkg_resources\\tests\\data\\my-test-package_zipped-egg'], 'venv.Lib.site-packages.setuptools._vendor': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\_vendor'], 'venv.Lib.site-packages.setuptools.tests.indexes': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\tests\\indexes'], 'venv.Lib.site-packages.setuptools.tests.indexes.test_links_priority': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\tests\\indexes\\test_links_priority'], 'venv.Lib.site-packages.setuptools.tests.indexes.test_links_priority.simple': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\tests\\indexes\\test_links_priority\\simple'], 'venv.Lib.site-packages.setuptools.tests.indexes.test_links_priority.simple.foobar': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\tests\\indexes\\test_links_priority\\simple\\foobar'], 'venv.Lib.site-packages.setuptools._vendor.jaraco': ['D:\\Bike insurance\\venv\\Lib\\site-packages\\setuptools\\_vendor\\jaraco'], 'venv.Lib.venv.scripts': ['D:\\Bike insurance\\venv\\Lib\\venv\\scripts'], 'venv.Lib.venv.scripts.common': ['D:\\Bike insurance\\venv\\Lib\\venv\\scripts\\common'], 'venv.Lib.venv.scripts.nt': ['D:\\Bike insurance\\venv\\Lib\\venv\\scripts\\nt'], 'venv.Lib.venv.scripts.posix': ['D:\\Bike insurance\\venv\\Lib\\venv\\scripts\\posix'], 'venv.Library.bin': ['D:\\Bike insurance\\venv\\Library\\bin'], 'venv.Library.include': ['D:\\Bike insurance\\venv\\Library\\include'], 'venv.Library.lib': ['D:\\Bike insurance\\venv\\Library\\lib'], 'venv.Library.share': ['D:\\Bike insurance\\venv\\Library\\share'], 'venv.Library.ssl': ['D:\\Bike insurance\\venv\\Library\\ssl'], 'venv.Library.include.lzma': ['D:\\Bike insurance\\venv\\Library\\include\\lzma'], 'venv.Library.include.openssl': ['D:\\Bike insurance\\venv\\Library\\include\\openssl'], 'venv.Library.include.X11': ['D:\\Bike insurance\\venv\\Library\\include\\X11'], 'venv.Library.lib.engines-1_1': ['D:\\Bike insurance\\venv\\Library\\lib\\engines-1_1'], 'venv.Library.lib.nmake': ['D:\\Bike insurance\\venv\\Library\\lib\\nmake'], 'venv.Library.lib.pkgconfig': ['D:\\Bike insurance\\venv\\Library\\lib\\pkgconfig'], 'venv.Library.lib.tcl8': ['D:\\Bike insurance\\venv\\Library\\lib\\tcl8'], 'venv.Library.share.libffi': ['D:\\Bike insurance\\venv\\Library\\share\\libffi'], 'venv.Library.share.man': ['D:\\Bike insurance\\venv\\Library\\share\\man'], 'venv.Library.share.man.man3': ['D:\\Bike insurance\\venv\\Library\\share\\man\\man3'], 'venv.Library.ssl.misc': ['D:\\Bike insurance\\venv\\Library\\ssl\\misc'], 'venv.share.zoneinfo': ['D:\\Bike insurance\\venv\\share\\zoneinfo'], 'venv.share.zoneinfo.Africa': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Africa'], 'venv.share.zoneinfo.America': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\America'], 'venv.share.zoneinfo.Antarctica': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Antarctica'], 'venv.share.zoneinfo.Arctic': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Arctic'], 'venv.share.zoneinfo.Asia': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Asia'], 'venv.share.zoneinfo.Atlantic': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Atlantic'], 'venv.share.zoneinfo.Australia': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Australia'], 'venv.share.zoneinfo.Brazil': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Brazil'], 'venv.share.zoneinfo.build': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\build'], 'venv.share.zoneinfo.Canada': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Canada'], 'venv.share.zoneinfo.Chile': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Chile'], 'venv.share.zoneinfo.Etc': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Etc'], 'venv.share.zoneinfo.Europe': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Europe'], 'venv.share.zoneinfo.Indian': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Indian'], 'venv.share.zoneinfo.Mexico': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Mexico'], 'venv.share.zoneinfo.Pacific': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\Pacific'], 'venv.share.zoneinfo.US': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\US'], 'venv.share.zoneinfo.America.Argentina': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\America\\Argentina'], 'venv.share.zoneinfo.America.Indiana': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\America\\Indiana'], 'venv.share.zoneinfo.America.Kentucky': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\America\\Kentucky'], 'venv.share.zoneinfo.America.North_Dakota': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\America\\North_Dakota'], 'venv.share.zoneinfo.build.etc': ['D:\\Bike insurance\\venv\\share\\zoneinfo\\build\\etc'], 'venv.Tools.demo': ['D:\\Bike insurance\\venv\\Tools\\demo'], 'venv.Tools.i18n': ['D:\\Bike insurance\\venv\\Tools\\i18n'], 'venv.Tools.scripts': ['D:\\Bike insurance\\venv\\Tools\\scripts'], 'venv.Tools.pynche.X': ['D:\\Bike insurance\\venv\\Tools\\pynche\\X']}
PATH_PLACEHOLDER = '__editable__.src-0.0.1.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
